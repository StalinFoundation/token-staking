;; Staking NFT collection smart contract

;; storage scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams;
;; default#_ min_percent:uint32 max_percent:uint32 reward_supply:Coins lockup_period: uint32 min_cycles:uint32 max_cycles:uint32 = StakingConfig;
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           jetton_wallet_address:MsgAddress
;;           current_supply:coins
;;           current_balance:coins
;;           use_default:bool
;;           staking_config:^StakingConfig
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           = Storage;

#pragma version >=0.4.0;
#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";
#include "imports/errors.fc";

int is_null?(slice s) asm "ISNULL";

const slice service_address = "UQBR7K8tQ7qoCAc07D4sQB3aREDWXtyGzfC73qMFHz1gfl3l"a;

const int min_gas_for_mint = 120000000;  ;; 0.21 TON = 0.1 gas + 0.11 fee
const int fee = 100000000;
const int min_gas_for_jetton_transfer = 100000000;  ;; 0.1 TON
const int min_store_amount = 100000000; ;; 0.1 TON

const int unstake_gas = 30000000; ;; 0.03 TON
const int burn_gas = 10000000; ;; 0.01 TON

const int hundred_percent = 100000000; ;; 100.000000%

global int storage::min_percent; ;; = 1000000 / 12; ;; 1.000000%
global int storage::max_percent; ;; = 15000000 / 12; ;; 15.000000% APY
global int storage::reward_supply; ;; = 1000000000000000; ;; 1M tokens
;; const int storage::reward_supply = 10000000000000; ;; 10k tokens
global int storage::lockup_period; ;; = 2592000; ;; 60sec * 60min * 24hour * 30day = 1month
;; const int storage::lockup_period = 300; ;; test period
global int storage::min_cycles; ;; = 1;
global int storage::max_cycles; ;; = 6;

global cell storage::conf;

(slice, int, slice, int, int, int, cell, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();
    storage::conf = ds~load_ref();
    var conf_cs = storage::conf.begin_parse();
    storage::min_percent = conf_cs~load_uint(32);
    storage::max_percent = conf_cs~load_uint(32);
    storage::reward_supply = conf_cs~load_coins();
    storage::lockup_period = conf_cs~load_uint(32);
    storage::min_cycles = conf_cs~load_uint(32);
    storage::max_cycles = conf_cs~load_uint(32);

    return (
        ds~load_msg_addr(),  ;; owner_address
        ds~load_uint(64),  ;; next_item_index
        ds~load_msg_addr(), ;; jetton_wallet_address
        ds~load_coins(), ;; current_supply
        ds~load_coins(), ;; current_balance
        ds~load_uint(1), ;; use_default
        ds~load_ref(),  ;; content
        ds~load_ref(),  ;; nft_item_code
        ds~load_ref()  ;; royalty_params
    );
}

() emit_log_simple (int event_id) impure inline {
    var msg = begin_cell()
            .store_uint (12, 4) ;; ext_out_msg_info$11 src:MsgAddressInt ()
            .store_uint (1, 2)
            .store_uint (256, 9)
            .store_uint(event_id, 256)
            .store_uint(0, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either
            .end_cell();
    send_raw_message(msg, 0);
}


() save_data(slice owner_address, int next_item_index, slice jetton_address, int current_supply, int current_balance, int use_default,
             cell content, cell nft_item_code, cell royalty_params) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_slice(jetton_address)
    .store_coins(current_supply)
    .store_coins(current_balance)
    .store_uint(use_default, 1)
    .store_ref(storage::conf)
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_ref(royalty_params)
    .end_cell());
}


(int, int, slice) load_royalty_params(cell royalty) inline {
    slice rs = royalty.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}


cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}


slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() send_fee() impure inline {
    builder msg = begin_cell()
          .store_uint(0x10, 6)
          .store_slice(service_address)
          .store_coins(fee)
          .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
          .store_uint(0, 32).store_slice("Fee 💎");
    send_raw_message(msg.end_cell(), 3); 
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure inline {
  send_fee();
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  builder msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(nft_address)
                .store_coins(amount - min_gas_for_mint)
                .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                .store_ref(state_init)
                .store_ref(nft_content);
  send_raw_message(msg.end_cell(), 0); 
}


() send_jettons(int query_id, int jetton_amount, slice from_address, slice jetton_address, int value, int mode) impure inline {
    builder msg = begin_cell()
                .store_uint(0x10, 6) 
                .store_slice(jetton_address)
                .store_coins(value)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                .store_uint(1, 1)
                .store_ref(
                  begin_cell()
                    .store_uint(op::transfer_jetton(), 32)
                    .store_uint(query_id, 64)
                    .store_coins(jetton_amount)
                    .store_slice(from_address)
                    .store_slice(from_address)
                    .store_uint(0, 1)
                    .store_coins(1)
                    .store_uint(0, 1)
                  .end_cell()
                );
            
    send_raw_message(msg.end_cell(), mode);  
}

() send_nft(int query_id, slice nft_address, slice new_owner, slice response_destination, int value, int mode) {
  builder msg = begin_cell()
                  .store_uint(0x18, 6)
                  .store_slice(nft_address)
                  .store_coins(value)
                  .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                  .store_uint(1, 1)
                  .store_ref(
                    begin_cell()
                      .store_uint(op::transfer(), 32)
                      .store_uint(query_id, 64)
                      .store_slice(new_owner)
                      .store_slice(response_destination)
                      .store_uint(0, 1)
                      .store_coins(1)
                      .store_uint(0, 1)
                    .end_cell()
                  );
  send_raw_message(msg.end_cell(), mode); 
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    if (op == op::nft_transferred()) {
        return ();
    }

    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, jetton_address, current_supply, current_balance, use_default, content, nft_item_code, royalty_params) = load_data();

    if (op == 3) {  ;; change owner
      throw_unless(err::access_denied, equal_slices(sender_address, owner_address));
      owner_address = in_msg_body~load_msg_addr();
      save_data(owner_address, next_item_index, jetton_address, current_supply, 
                current_balance, use_default, content, nft_item_code, royalty_params);
      return ();
    }
    
    ;; op-code for saving new jetton_wallet_address in storage
    if (op == 4) {
      throw_if(err::access_denied, jetton_address.preload_uint(2));
      jetton_address = in_msg_body~load_msg_addr();
      save_data(owner_address, next_item_index, jetton_address, current_supply, 
                current_balance, use_default, content, nft_item_code, royalty_params);
      return ();
    }
    ;; op-code to set new content
    if (op == 5) {
      throw_unless(err::access_denied, equal_slices(sender_address, owner_address));
      content = in_msg_body~load_ref();
      save_data(owner_address, next_item_index, jetton_address, current_supply, 
                current_balance, use_default, content, nft_item_code, royalty_params);
      return ();
    }
    ;; op-code to set new royalty options
    if (op == 6) {
      throw_unless(err::access_denied, equal_slices(sender_address, owner_address));
      royalty_params = in_msg_body~load_ref();
      save_data(owner_address, next_item_index, jetton_address, current_supply, 
                current_balance, use_default, content, nft_item_code, royalty_params);
      return ();
    }
    ;; op-code to change default content option
    if (op == 7) {
      throw_unless(err::access_denied, equal_slices(sender_address, owner_address));
      use_default = in_msg_body~load_uint(1);
      save_data(owner_address, next_item_index, jetton_address, current_supply, 
                current_balance, use_default, content, nft_item_code, royalty_params);
      return ();
    }
    ;; op-code to return reward tokens
    if (op == 8) {
      throw_unless(err::access_denied, equal_slices(sender_address, service_address));
      throw_unless(err::not_ready, current_supply > 0);
      send_jettons(query_id, current_supply, sender_address, jetton_address, 0, 64);   
      save_data(owner_address, next_item_index, jetton_address, 0, 
                current_balance, use_default, content, nft_item_code, royalty_params);
      return ();
    }
    ;; op-code to transfer coins if the balance > 0.1
    if (op == 9) {
      throw_unless(err::access_denied, equal_slices(sender_address, owner_address));
      throw_unless(err::not_ready, my_balance > min_store_amount);
      builder msg = begin_cell()
                            .store_uint(0x10, 6)
                            .store_slice(sender_address)
                            .store_coins(my_balance - min_store_amount)
                            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                            .store_uint(op::excesses(), 32);
      send_raw_message(msg.end_cell(), 0); 
      save_data(owner_address, next_item_index, jetton_address, current_supply, 
                current_balance, use_default, content, nft_item_code, royalty_params);
      return ();
    }
    if (op == 10) {
      throw_unless(err::access_denied, equal_slices(sender_address, owner_address));
      throw_unless(err::not_ready, in_msg_body.slice_bits() >= 164);
      storage::conf = begin_cell().store_slice(in_msg_body).end_cell();
      in_msg_body~skip_bits(64);
      in_msg_body~load_coins();
      throw_unless(err::not_ready, in_msg_body.slice_bits() == 96);
      save_data(owner_address, next_item_index, jetton_address, current_supply, 
                current_balance, use_default, content, nft_item_code, royalty_params);
      return ();
    }

    ;;TODO add change content link + default link
    
    ;; jetton transfer notification
    if (op == op::transfer_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();

        ;; check if user sent the correct token with enough toncoins for gas. If not, try to send them back.
        ifnot (equal_slices(sender_address, jetton_address) & (msg_value >= min_gas_for_mint + fee)) {
          send_jettons(query_id, jetton_amount, from_address, sender_address, 0, 64);
          return ();
        }

        int cycles_amount = storage::min_cycles;
        if (in_msg_body.slice_bits() >= 33) {
            in_msg_body~skip_bits(1);
            int in_transfer_value = in_msg_body~load_uint(32);
            emit_log_simple(in_transfer_value);
            if(in_transfer_value == op::donate()) {
              current_balance += jetton_amount;
              current_supply += jetton_amount;
              save_data(owner_address, next_item_index, jetton_address, current_supply, 
                        current_balance, use_default, content, nft_item_code, royalty_params);

              builder msg = begin_cell()
                            .store_uint(0x10, 6)
                            .store_slice(from_address)
                            .store_coins(0)
                            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                            .store_uint(op::excesses(), 32);
              send_raw_message(msg.end_cell(), 64); 

              return ();
            }
            else {
              if(in_transfer_value > storage::max_cycles) {
                cycles_amount = storage::max_cycles;
              } 
              else {
                if(in_transfer_value < storage::min_cycles) {
                  cycles_amount = storage::min_cycles;
                }
                else {
                  cycles_amount = in_transfer_value;
                }
              }
            }
          }

        current_balance += jetton_amount;  ;; increase current_balance
        int staking_factor = storage::max_percent;
        if (current_supply < storage::reward_supply) {
          staking_factor = muldiv(storage::max_percent, current_supply, storage::reward_supply);
        }

        if (staking_factor < storage::min_percent) {
          send_jettons(query_id, jetton_amount, from_address, sender_address, 0, 64);
          return ();
        } 

        int tmp = muldiv(jetton_amount, staking_factor * cycles_amount, hundred_percent);

        if (current_supply < tmp) {
          tmp = current_supply;
        }
        current_supply -= tmp;

        int now_time = now();
        cell nft_content = begin_cell()
                            .store_uint(now_time + storage::lockup_period * cycles_amount, 64)  ;; end of lockup
                            .store_coins(jetton_amount + tmp)  ;; amount of jettons to lock
                           .end_cell();

        cell nft_message = begin_cell()
                            .store_slice(from_address)  
                            .store_ref(nft_content)
                           .end_cell();

        ;; deployment of NFT that proves ownership of locked jettons
        deploy_nft_item(next_item_index, nft_item_code, msg_value, nft_message);
        next_item_index += 1;
        save_data(owner_address, next_item_index, jetton_address, current_supply, 
                  current_balance, use_default, content, nft_item_code, royalty_params);
        
        return ();
    }

    if (op == op::ownership_assigned()) {
      slice from_address = in_msg_body~load_msg_addr();
      send_nft(query_id, sender_address, from_address, from_address, 0, 64);
      return ();
    } 

    if (op == op::process_burn()) {
        slice from_address = in_msg_body~load_msg_addr();

        ;; check that nft is from this collection
        int item_index = in_msg_body~load_uint(64);  
        cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
        slice nft_address = calculate_nft_item_address(workchain(), state_init);

        ifnot (equal_slices(sender_address, nft_address) | (msg_value >= min_gas_for_jetton_transfer)) {
          send_nft(query_id, sender_address, from_address, from_address, 0, 64);
          return ();
        }

        slice nft_content = in_msg_body~load_ref().begin_parse();

        int end_time = nft_content~load_uint(64);
        int staked_amount = nft_content~load_coins();
        int now_time = now();

        ;; check that lockup period is over
        if (now_time < end_time) {   ;; if not - return nft back to user
          send_nft(query_id, sender_address, from_address, from_address, 0, 64);
        }
        else {  ;; unstake
            ;; burn nft after unstaking
            cell burn_msg = begin_cell()
                                .store_uint(0x18, 6)
                                .store_slice(sender_address)
                                .store_coins(burn_gas)
                                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                                .store_uint(op::end_burn(), 32)
                                .store_uint(query_id, 64)
                                .store_slice(from_address)
                            .end_cell();

            send_raw_message(burn_msg, 0);
            send_jettons(query_id, staked_amount, from_address, jetton_address, msg_value - unstake_gas - burn_gas, 0);   
            send_fee();

            current_balance -= staked_amount;
            save_data(owner_address, next_item_index, jetton_address, current_supply, 
                  current_balance, use_default, content, nft_item_code, royalty_params);
        }

        return ();
    }

    throw(err::unknown);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
  var (owner_address, next_item_index, _, _, _, _, content, _, _) = load_data();
  slice cs = content.begin_parse();
  return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, next_item_index, _, _, _, _, _, nft_item_code, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain(), state_init);
}

(int, int, slice) royalty_params() method_id {
    var (_, _, _, _, _, _, _, _, royalty) = load_data();
    return load_royalty_params(royalty);
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    var (_, _, _, _, _, use_default, content, _, _) = load_data();
    slice cs = content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();

    builder string = begin_cell();
    ifnot (use_default) {
      tuple chars = null();
      do {
          int r = index~divmod(10);
          chars = cons(r + 48, chars);
      } until (index == 0);
      do {
          int char = chars~list_next();
          string~store_uint(char, 8);
      } until (null?(chars));
    }
    else {
      string = string.store_slice("default");
    }
    
    return (begin_cell()
                .store_uint(1, 8)  ;; offchain tag
                .store_slice(common_content)
                .store_ref(string.store_slice(".json").end_cell())
            .end_cell());
}

slice get_jetton_address() method_id {
    var (_, _, address, _, _, _, _, _, _) = load_data();
    return address;
}

slice get_service_address() method_id {
  return service_address;
}

(int, int, int, int, int, int, int, int) get_staking_data() method_id {
    var (_, _, _, current_supply, current_balance, _, _, _, _) = load_data();
    return (current_supply, current_balance, storage::reward_supply, storage::min_percent, storage::max_percent, storage::lockup_period, storage::min_cycles, storage::max_cycles);
}